# Credit to https://github.com/jessfraz/dotfiles
# and to https://github.com/mathiasbynens/dotfiles

[alias]

	# View abbreviated SHA, description, and history graph of the latest 20 commits
	l = log --pretty=oneline -n 20 --graph --abbrev-commit

	# View the current working tree status using the short format
	s = status -s

	# Color graph log view
	graph = log --graph --color --pretty=format:"%C(yellow)%H%C(green)%d%C(reset)%n%x20%cd%n%x20%cn%x20(%ce)%n%x20%s%n"

	# Interactive rebase with the given number of latest commits
	reb = "!r() { git rebase -i HEAD~$1; }; r"

	# Find branches containing commit
	fb = "!f() { git branch -a --contains $1; }; f"

	# Find tags containing commit
	ft = "!f() { git describe --always --contains $1; }; f"

	# Find commits by source code
	fc = "!f() { git log --pretty=format:'%C(yellow)%h	%Cblue%ad  %Creset%s%Cgreen  [%cn] %Cred%d' --decorate --date=short -S$1; }; f"

	# Find commits by commit message
	fm = "!f() { git log --pretty=format:'%C(yellow)%h	%Cblue%ad  %Creset%s%Cgreen  [%cn] %Cred%d' --decorate --date=short --grep=$1; }; f"

	# Remove branches that have already been merged with master
	# a.k.a. ‘delete merged’
	dm = "!git branch --merged | grep -v '\\*' | xargs -n 1 git branch -d; git remote -v update -p"

	# List contributors with number of commits
	cont = shortlog --summary --numbered

	lg = log --color --decorate --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an (%G?)>%Creset' --abbrev-commit

	top = lg -20

	# from trevor bramble https://twitter.com/TrevorBramble/status/774292970681937920
	alias=!git config -l | grep ^alias | cut -c 7- | sort

	# Show the user email for the current repository.
	whoami = config user.email

[apply]

	# Detect whitespace errors when applying a patch
	whitespace = fix

[branch]

	# Show most recently changed branches first.
	sort = -committerdate

[core]

	editor = nvim

	# Use custom `.gitignore` and `.gitattributes`
	excludesfile = ~/.gitignore
	attributesfile = ~/.gitattributes

	# Treat spaces before tabs and all kinds of trailing whitespace as an error
	# [default] trailing-space: looks for spaces at the end of a line
	# [default] space-before-tab: looks for spaces before tabs at the beginning of a line
	whitespace = space-before-tab,-indent-with-non-tab,trailing-space

	# Make `git rebase` safer on OS X
	# More info: <http://www.git-tower.com/blog/make-git-rebase-safe-on-osx/>
	trustctime = false

	# Prevent showing files whose names contain non-ASCII symbols as unversioned.
	# http://michael-kuehnel.de/git/2014/11/21/git-mac-osx-and-german-umlaute.html
	precomposeunicode = false

	# Speed up commands involving untracked files such as `git status`.
	# https://git-scm.com/docs/git-update-index#_untracked_cache
	untrackedCache = true

[color]

	# Use colors in Git commands that are capable of colored output when
	# outputting to the terminal. (This is the default setting in Git ≥ 1.8.4.)
	ui = auto

[color "branch"]

	current = yellow reverse
	local = yellow
	remote = green

[color "diff"]

	meta = yellow bold
	frag = magenta bold # line info
	old = red # deletions
	new = green # additions

[color "status"]

	added = yellow
	changed = green
	untracked = cyan

[diff]

	# Detect copies as well as renames
	renames = copies

	# Show blocks of moved text of at least 20 alphanumeric characters differently than adds/deletes
    # https://blog.github.com/2018-04-05-git-217-released/
    colorMoved = zebra

[diff "bin"]

	# Use `hexdump` to diff binary files.
	textconv = hexdump -v -C

[help]

	# Automatically correct and execute mistyped commands
	autocorrect = 1

[merge]

	# Include summaries of merged commits in newly created merge commit messages
	log = true

[push]
	# change to matching for machines with older versions of git 1.x.x
	# https://git-scm.com/docs/git-config#git-config-pushdefault
	default = simple
	autoSetupRemote = true
	
	# push easily. http://stackoverflow.com/a/23918418/89484
	# default = current

	# Make `git push` push relevant annotated tags when pushing branches out.
	followTags = true

[url "git@github.com:github"]

	insteadOf = "https://github.com/github"
	insteadOf = "github:github"
	insteadOf = "git://github.com/github"

[url "git@github.com:"]

	pushInsteadOf = "https://github.com/"
	pushInsteadOf = "github:"
	pushInsteadOf = "git://github.com/"

[url "git://github.com/"]

	insteadOf = "github:"

[url "git@gist.github.com:"]

	insteadOf = "gst:"
	pushInsteadOf = "gist:"
	pushInsteadOf = "git://gist.github.com/"

[url "git://gist.github.com/"]

	insteadOf = "gist:"

# Uncomment if you want fetch to also get all github pull requests, this is rather
# large on big repos.
#[remote "origin"]
	#fetch = +refs/pull/*/head:refs/remotes/origin/pull/*

[commit]

	# https://help.github.com/articles/signing-commits-using-gpg/
	# gpgsign = true

[pull]

	rebase = true

[filter "lfs"]

    clean = git-lfs clean -- %f
    smudge = git-lfs smudge -- %f
    process = git-lfs filter-process
    required = true

[init]

    defaultBranch = "main"

[fetch]

	prune = true

[stash]

	showPatch = true

[log]

	date = relative
[user]
	name = Mansour Rahimi
	email = rahimi.mnr@gmail.com
[github]
	user = m4ns0ur
[safe]
	directory = /Users/mansour/workspace
